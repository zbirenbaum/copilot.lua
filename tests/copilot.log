2025-04-02 21:02:56.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:02:56.080 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:02:56.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:02:56.095 [3] [TRACE]: suggestion context
2025-04-02 21:02:56.096 [5] [TRACE]: suggestion context
2025-04-02 21:02:56.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:03:59.089 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:03:59.090 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:03:59.113 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:03:59.113 [3] [TRACE]: suggestion context
2025-04-02 21:03:59.114 [5] [TRACE]: suggestion context
2025-04-02 21:03:59.114 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:04:53.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:04:53.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:04:53.095 [3] [TRACE]: suggestion context
2025-04-02 21:04:53.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:04:53.096 [5] [TRACE]: suggestion context
2025-04-02 21:04:53.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:05:12.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:05:12.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:05:12.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:05:12.096 [3] [TRACE]: suggestion context
2025-04-02 21:05:12.097 [5] [TRACE]: suggestion context
2025-04-02 21:05:12.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:05:33.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:05:33.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:05:33.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:05:33.095 [3] [TRACE]: suggestion context
2025-04-02 21:05:33.096 [5] [TRACE]: suggestion context
2025-04-02 21:05:33.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:05:45.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:05:45.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:05:45.096 [3] [TRACE]: suggestion context
2025-04-02 21:05:45.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:05:45.097 [5] [TRACE]: suggestion context
2025-04-02 21:05:45.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:05:58.078 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:05:58.079 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:05:58.092 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:05:58.092 [3] [TRACE]: suggestion context
2025-04-02 21:05:58.094 [5] [TRACE]: suggestion context
2025-04-02 21:05:58.094 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:06:20.079 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:06:20.080 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:06:20.094 [3] [TRACE]: suggestion context
2025-04-02 21:06:20.094 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:06:20.095 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:06:20.095 [5] [TRACE]: suggestion context
2025-04-02 21:07:02.078 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:07:02.079 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:07:02.092 [3] [TRACE]: Status called
2025-04-02 21:07:02.092 [4] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:07:02.094 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:07:02.094 [5] [TRACE]: suggestion context
2025-04-02 21:07:02.096 [7] [TRACE]: suggestion context
2025-04-02 21:07:02.096 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:09:48.609 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:09:48.611 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:09:48.644 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:09:48.644 [3] [TRACE]: suggestion context
2025-04-02 21:09:48.665 [5] [TRACE]: suggestion context
2025-04-02 21:09:48.665 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:11:05.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:11:05.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:11:20.562 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:11:20.562 [3] [TRACE]: suggestion context
2025-04-02 21:11:20.564 [5] [TRACE]: suggestion context
2025-04-02 21:11:20.564 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:11:40.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:11:40.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:11:40.099 [3] [TRACE]: suggestion context
2025-04-02 21:11:40.099 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:11:40.101 [5] [TRACE]: suggestion context
2025-04-02 21:11:40.101 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:12:18.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:12:18.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:12:18.095 [3] [TRACE]: suggestion context
2025-04-02 21:12:18.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:12:18.096 [5] [TRACE]: suggestion context
2025-04-02 21:12:18.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:16:47.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:16:47.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:16:47.095 [3] [TRACE]: suggestion context
2025-04-02 21:16:47.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:16:47.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:16:47.096 [5] [TRACE]: suggestion context
2025-04-02 21:21:43.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:21:43.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:21:43.096 [3] [TRACE]: suggestion context
2025-04-02 21:21:43.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:21:43.097 [5] [TRACE]: suggestion context
2025-04-02 21:21:43.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:23:51.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:23:51.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:23:52.353 [3] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:23:52.727 [4] [TRACE]: suggestion context
2025-04-02 21:23:52.727 [5] [TRACE]: suggestion new context
{}
2025-04-02 21:23:52.729 [7] [TRACE]: suggestion new context
{}
2025-04-02 21:23:52.729 [6] [TRACE]: suggestion context
2025-04-02 21:24:43.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:24:43.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:24:45.340 [3] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:24:50.929 [4] [TRACE]: suggestion context
2025-04-02 21:24:50.929 [5] [TRACE]: suggestion new context
{}
2025-04-02 21:24:50.932 [6] [TRACE]: suggestion context
2025-04-02 21:24:50.932 [7] [TRACE]: suggestion new context
{}
2025-04-02 21:26:17.079 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:26:17.080 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:26:19.330 [3] [TRACE]: Status called
2025-04-02 21:26:19.330 [4] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:26:25.999 [5] [TRACE]: suggestion context
2025-04-02 21:26:25.999 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:26:25.000 [7] [TRACE]: suggestion context
2025-04-02 21:26:25.000 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:26:31.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:26:31.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:26:32.352 [3] [TRACE]: Status called
2025-04-02 21:26:32.352 [4] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:26:34.390 [5] [TRACE]: suggestion context
2025-04-02 21:26:34.390 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:26:34.395 [7] [TRACE]: suggestion context
2025-04-02 21:26:34.395 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:26:39.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:26:39.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:26:40.340 [3] [TRACE]: Status called
2025-04-02 21:26:40.340 [4] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:26:42.371 [5] [TRACE]: suggestion context
2025-04-02 21:26:42.371 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:26:42.375 [7] [TRACE]: suggestion context
2025-04-02 21:26:42.375 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:28:44.079 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:28:44.080 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:28:45.338 [3] [TRACE]: Status called
2025-04-02 21:28:45.338 [4] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:28:55.407 [5] [TRACE]: suggestion context
2025-04-02 21:28:55.407 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:28:55.410 [7] [TRACE]: suggestion context
2025-04-02 21:28:55.410 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:30:31.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:30:31.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:30:32.350 [3] [TRACE]: Status called
2025-04-02 21:30:32.350 [4] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:30:34.371 [5] [TRACE]: suggestion context
2025-04-02 21:30:34.371 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:30:34.374 [7] [TRACE]: suggestion context
2025-04-02 21:30:34.374 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:31:05.078 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:31:05.079 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:31:06.344 [4] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:31:06.344 [3] [TRACE]: Status called
2025-04-02 21:31:07.359 [5] [TRACE]: suggestion context
2025-04-02 21:31:07.359 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:31:07.362 [7] [TRACE]: suggestion context
2025-04-02 21:31:07.362 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:32:10.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:32:10.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:32:11.348 [3] [TRACE]: Status called
2025-04-02 21:32:11.348 [4] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:32:13.383 [5] [TRACE]: suggestion context
2025-04-02 21:32:13.383 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:32:13.386 [7] [TRACE]: suggestion context
2025-04-02 21:32:13.386 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:32:46.079 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:32:46.079 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:32:48.338 [3] [TRACE]: Status called
2025-04-02 21:32:48.338 [4] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:32:50.361 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:32:50.361 [5] [TRACE]: suggestion context
2025-04-02 21:32:50.362 [7] [TRACE]: suggestion context
2025-04-02 21:32:50.362 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:33:19.079 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:33:19.080 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:33:21.349 [3] [TRACE]: Status called
2025-04-02 21:33:21.349 [4] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:33:21.355 [5] [TRACE]: suggestion context
2025-04-02 21:33:21.355 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:33:21.359 [7] [TRACE]: suggestion context
2025-04-02 21:33:21.359 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:33:38.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:33:38.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:33:39.347 [3] [TRACE]: Status called
2025-04-02 21:33:39.347 [4] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:33:39.349 [5] [TRACE]: suggestion context
2025-04-02 21:33:39.350 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:33:39.351 [7] [TRACE]: suggestion context
2025-04-02 21:33:39.351 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:34:31.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:34:31.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:34:31.095 [3] [ERROR]: client not initialized yet
2025-04-02 21:34:31.197 [5] [ERROR]: client not initialized yet
2025-04-02 21:34:31.306 [7] [ERROR]: client not initialized yet
2025-04-02 21:34:32.348 [9] [TRACE]: Status called
2025-04-02 21:34:32.348 [10] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:34:32.353 [11] [ERROR]: client not initialized yet
2025-04-02 21:34:32.354 [13] [ERROR]: client not initialized yet
2025-04-02 21:34:32.354 [17] [ERROR]: client not initialized yet
2025-04-02 21:34:32.354 [15] [ERROR]: client not initialized yet
2025-04-02 21:34:32.354 [19] [ERROR]: client not initialized yet
2025-04-02 21:34:32.354 [21] [ERROR]: client not initialized yet
2025-04-02 21:34:32.355 [23] [ERROR]: client not initialized yet
2025-04-02 21:34:32.355 [25] [ERROR]: client not initialized yet
2025-04-02 21:34:33.367 [27] [TRACE]: suggestion context
2025-04-02 21:34:33.367 [28] [TRACE]: suggestion new context
{}
2025-04-02 21:34:33.367 [30] [TRACE]: suggestion new context
{}
2025-04-02 21:34:33.367 [29] [TRACE]: suggestion context
2025-04-02 21:34:44.079 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:34:44.080 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:34:44.094 [3] [ERROR]: client not initialized yet
2025-04-02 21:34:45.116 [5] [ERROR]: client not initialized yet
2025-04-02 21:34:45.116 [7] [ERROR]: client not initialized yet
2025-04-02 21:34:45.116 [9] [TRACE]: Status called
2025-04-02 21:34:45.116 [10] [TRACE]: api request:
"checkStatus"
{}
2025-04-02 21:34:45.119 [11] [ERROR]: client not initialized yet
2025-04-02 21:34:45.119 [13] [ERROR]: client not initialized yet
2025-04-02 21:34:45.119 [15] [ERROR]: client not initialized yet
2025-04-02 21:34:45.119 [17] [ERROR]: client not initialized yet
2025-04-02 21:34:45.120 [21] [ERROR]: client not initialized yet
2025-04-02 21:34:45.119 [19] [ERROR]: client not initialized yet
2025-04-02 21:34:46.145 [23] [TRACE]: suggestion context
2025-04-02 21:34:46.145 [24] [TRACE]: suggestion new context
{}
2025-04-02 21:34:46.145 [25] [TRACE]: suggestion context
2025-04-02 21:34:46.145 [26] [TRACE]: suggestion new context
{}
2025-04-02 21:37:29.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:37:29.083 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:37:29.096 [3] [ERROR]: client not initialized yet
2025-04-02 21:37:29.096 [5] [TRACE]: suggestion context
2025-04-02 21:37:29.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:37:29.098 [7] [TRACE]: suggestion context
2025-04-02 21:37:29.098 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:46:55.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:46:55.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:46:55.097 [3] [TRACE]: suggestion context
2025-04-02 21:46:55.097 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:46:55.099 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:46:55.099 [5] [TRACE]: suggestion context
2025-04-02 21:49:37.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:49:37.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:49:37.095 [3] [TRACE]: suggestion context
2025-04-02 21:49:37.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:49:37.097 [5] [TRACE]: suggestion context
2025-04-02 21:49:37.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:49:38.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:49:38.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:49:38.098 [3] [ERROR]: client is not initialized yet
2025-04-02 21:49:38.100 [5] [TRACE]: suggestion context
2025-04-02 21:49:38.100 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:49:38.102 [7] [TRACE]: suggestion context
2025-04-02 21:49:38.102 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:52:15.082 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:52:15.083 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:52:15.096 [3] [TRACE]: suggestion context
2025-04-02 21:52:15.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:52:15.097 [5] [TRACE]: suggestion context
2025-04-02 21:52:15.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:52:15.085 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:52:15.086 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:52:15.099 [3] [ERROR]: client is not initialized yet
2025-04-02 21:52:15.101 [5] [TRACE]: suggestion context
2025-04-02 21:52:15.101 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:52:15.103 [7] [TRACE]: suggestion context
2025-04-02 21:52:15.103 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:52:35.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:52:35.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:52:35.095 [3] [TRACE]: suggestion context
2025-04-02 21:52:35.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:52:35.096 [5] [TRACE]: suggestion context
2025-04-02 21:52:35.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:52:35.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:52:35.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:52:35.098 [3] [ERROR]: client is not initialized yet
2025-04-02 21:52:35.100 [5] [TRACE]: suggestion context
2025-04-02 21:52:35.100 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:52:35.102 [7] [TRACE]: suggestion context
2025-04-02 21:52:35.102 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:55:43.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:55:43.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:55:43.095 [3] [TRACE]: suggestion context
2025-04-02 21:55:43.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:55:43.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:55:43.096 [5] [TRACE]: suggestion context
2025-04-02 21:55:43.082 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:55:43.083 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:55:43.095 [3] [ERROR]: client is not initialized yet
2025-04-02 21:55:43.097 [5] [TRACE]: suggestion context
2025-04-02 21:55:43.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:55:43.099 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:55:43.099 [7] [TRACE]: suggestion context
2025-04-02 21:56:05.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:56:05.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:56:05.096 [3] [TRACE]: suggestion context
2025-04-02 21:56:05.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:56:05.098 [5] [TRACE]: suggestion context
2025-04-02 21:56:05.098 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:56:05.088 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:56:05.089 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:56:05.102 [3] [ERROR]: client is not initialized yet
2025-04-02 21:56:05.104 [5] [TRACE]: suggestion context
2025-04-02 21:56:05.105 [7] [TRACE]: suggestion context
2025-04-02 21:56:05.104 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:56:05.105 [8] [TRACE]: suggestion new context
{}
2025-04-02 21:56:29.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:56:29.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:56:29.095 [3] [TRACE]: suggestion context
2025-04-02 21:56:29.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 21:56:29.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:56:29.096 [5] [TRACE]: suggestion context
2025-04-02 21:56:29.082 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 21:56:29.083 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 21:56:29.096 [3] [ERROR]: client is not initialized yet
2025-04-02 21:56:29.098 [5] [TRACE]: suggestion context
2025-04-02 21:56:29.098 [6] [TRACE]: suggestion new context
{}
2025-04-02 21:56:29.099 [7] [TRACE]: suggestion context
2025-04-02 21:56:29.099 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:04:00.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:04:00.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:04:00.098 [3] [TRACE]: suggestion context
2025-04-02 22:04:00.098 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:04:00.099 [5] [TRACE]: suggestion context
2025-04-02 22:04:00.099 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:04:00.091 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:04:00.091 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:04:00.105 [3] [ERROR]: client is not initialized yet
2025-04-02 22:04:00.106 [5] [TRACE]: suggestion context
2025-04-02 22:04:00.106 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:04:00.108 [7] [TRACE]: suggestion context
2025-04-02 22:04:00.108 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:05:02.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:05:02.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:05:02.094 [3] [TRACE]: suggestion context
2025-04-02 22:05:02.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:05:02.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:05:02.096 [5] [TRACE]: suggestion context
2025-04-02 22:05:02.085 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:05:02.086 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:05:02.098 [3] [ERROR]: client is not initialized yet
2025-04-02 22:05:02.099 [5] [TRACE]: suggestion context
2025-04-02 22:05:02.099 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:05:02.101 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:05:02.101 [7] [TRACE]: suggestion context
2025-04-02 22:06:16.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:06:16.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:06:16.095 [3] [TRACE]: suggestion context
2025-04-02 22:06:16.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:06:16.097 [5] [TRACE]: suggestion context
2025-04-02 22:06:16.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:06:16.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:06:16.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:06:16.094 [3] [ERROR]: client is not initialized yet
2025-04-02 22:06:16.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:06:16.096 [5] [TRACE]: suggestion context
2025-04-02 22:06:16.097 [7] [TRACE]: suggestion context
2025-04-02 22:06:16.097 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:09:10.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:09:10.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:09:10.096 [3] [TRACE]: suggestion context
2025-04-02 22:09:10.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:09:10.097 [5] [TRACE]: suggestion context
2025-04-02 22:09:10.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:09:11.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:09:11.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:09:11.099 [3] [ERROR]: client is not initialized yet
2025-04-02 22:09:11.101 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:09:11.101 [5] [TRACE]: suggestion context
2025-04-02 22:09:11.102 [7] [TRACE]: suggestion context
2025-04-02 22:09:11.102 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:15:15.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:15:15.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:15:15.095 [3] [TRACE]: suggestion context
2025-04-02 22:15:15.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:15:15.097 [5] [TRACE]: suggestion context
2025-04-02 22:15:15.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:15:15.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:15:15.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:15:15.095 [3] [WARN]: client is not initialized yet
2025-04-02 22:15:15.097 [5] [TRACE]: suggestion context
2025-04-02 22:15:15.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:15:15.099 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:15:15.099 [7] [TRACE]: suggestion context
2025-04-02 22:15:35.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:15:35.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:15:35.095 [3] [TRACE]: suggestion context
2025-04-02 22:15:35.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:15:35.096 [5] [TRACE]: suggestion context
2025-04-02 22:15:35.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:15:35.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:15:35.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:15:35.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:15:35.095 [3] [TRACE]: suggestion context
2025-04-02 22:15:35.097 [5] [TRACE]: suggestion context
2025-04-02 22:15:35.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:15:35.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:15:35.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:15:35.094 [3] [WARN]: client is not initialized yet
2025-04-02 22:15:35.095 [5] [TRACE]: suggestion context
2025-04-02 22:15:35.095 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:15:35.097 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:15:35.097 [7] [TRACE]: suggestion context
2025-04-02 22:15:51.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:15:51.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:15:51.095 [3] [TRACE]: suggestion context
2025-04-02 22:15:51.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:15:51.097 [5] [TRACE]: suggestion context
2025-04-02 22:15:51.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:15:51.087 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:15:51.088 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:15:51.103 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:15:51.103 [3] [TRACE]: suggestion context
2025-04-02 22:15:51.105 [5] [TRACE]: suggestion context
2025-04-02 22:15:51.105 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:15:51.086 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:15:51.087 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:15:51.101 [3] [WARN]: client is not initialized yet
2025-04-02 22:15:51.103 [5] [TRACE]: suggestion context
2025-04-02 22:15:51.103 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:15:51.105 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:15:51.105 [7] [TRACE]: suggestion context
2025-04-02 22:16:22.086 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:16:22.087 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:16:22.101 [3] [TRACE]: suggestion context
2025-04-02 22:16:22.101 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:16:22.103 [5] [TRACE]: suggestion context
2025-04-02 22:16:22.103 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:16:22.090 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:16:22.091 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:16:22.106 [3] [TRACE]: suggestion context
2025-04-02 22:16:22.106 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:16:22.107 [5] [TRACE]: suggestion context
2025-04-02 22:16:22.107 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:16:22.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:16:22.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:16:22.097 [3] [WARN]: client is not initialized yet
2025-04-02 22:16:22.099 [5] [TRACE]: suggestion context
2025-04-02 22:16:22.099 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:16:22.101 [7] [TRACE]: suggestion context
2025-04-02 22:16:22.101 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:16:40.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:16:40.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:16:40.095 [3] [TRACE]: suggestion context
2025-04-02 22:16:40.095 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:16:40.096 [5] [TRACE]: suggestion context
2025-04-02 22:16:40.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:16:40.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:16:40.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:16:40.097 [3] [TRACE]: suggestion context
2025-04-02 22:16:40.097 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:16:40.099 [5] [TRACE]: suggestion context
2025-04-02 22:16:40.099 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:16:40.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:16:40.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:16:40.093 [3] [WARN]: client is not initialized yet
2025-04-02 22:16:40.095 [5] [TRACE]: suggestion context
2025-04-02 22:16:40.095 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:16:40.097 [7] [TRACE]: suggestion context
2025-04-02 22:16:40.097 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:16:52.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:16:52.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:16:52.097 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:16:52.097 [3] [TRACE]: suggestion context
2025-04-02 22:16:52.099 [5] [TRACE]: suggestion context
2025-04-02 22:16:52.099 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:16:52.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:16:52.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:16:52.094 [3] [WARN]: client is not initialized yet
2025-04-02 22:16:52.096 [5] [TRACE]: suggestion context
2025-04-02 22:16:52.096 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:16:52.097 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:16:52.097 [7] [TRACE]: suggestion context
2025-04-02 22:17:44.082 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:17:44.083 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:17:44.096 [3] [TRACE]: suggestion context
2025-04-02 22:17:44.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:17:44.098 [5] [TRACE]: suggestion context
2025-04-02 22:17:44.098 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:17:44.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:17:44.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:17:44.096 [3] [TRACE]: suggestion context
2025-04-02 22:17:44.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:17:44.097 [5] [TRACE]: suggestion context
2025-04-02 22:17:44.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:17:44.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:17:44.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:17:44.097 [3] [WARN]: client is not initialized yet
2025-04-02 22:17:44.099 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:17:44.100 [7] [TRACE]: suggestion context
2025-04-02 22:17:44.099 [5] [TRACE]: suggestion context
2025-04-02 22:17:44.100 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:17:59.080 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:17:59.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:17:59.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:17:59.096 [3] [TRACE]: suggestion context
2025-04-02 22:17:59.097 [5] [TRACE]: suggestion context
2025-04-02 22:17:59.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:17:59.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:17:59.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:17:59.096 [3] [TRACE]: suggestion context
2025-04-02 22:17:59.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:17:59.097 [5] [TRACE]: suggestion context
2025-04-02 22:17:59.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:17:59.082 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:17:59.083 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:17:59.096 [3] [WARN]: client is not initialized yet
2025-04-02 22:17:59.098 [5] [TRACE]: suggestion context
2025-04-02 22:17:59.098 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:17:59.099 [7] [TRACE]: suggestion context
2025-04-02 22:17:59.099 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:18:50.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:18:50.081 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:18:50.096 [3] [TRACE]: suggestion context
2025-04-02 22:18:50.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:18:50.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:18:50.097 [5] [TRACE]: suggestion context
2025-04-02 22:18:50.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:18:50.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:18:50.098 [3] [TRACE]: suggestion context
2025-04-02 22:18:50.098 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:18:50.100 [5] [TRACE]: suggestion context
2025-04-02 22:18:50.100 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:18:50.082 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:18:50.083 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:18:51.095 [3] [WARN]: client is not initialized yet
2025-04-02 22:18:51.097 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:18:51.097 [5] [TRACE]: suggestion context
2025-04-02 22:18:51.099 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:18:51.099 [7] [TRACE]: suggestion context
2025-04-02 22:19:07.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:19:07.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:19:07.096 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:19:07.096 [3] [TRACE]: suggestion context
2025-04-02 22:19:07.098 [5] [TRACE]: suggestion context
2025-04-02 22:19:07.098 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:19:07.085 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:19:07.086 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:19:07.101 [3] [TRACE]: suggestion context
2025-04-02 22:19:07.101 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:19:07.103 [5] [TRACE]: suggestion context
2025-04-02 22:19:07.103 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:19:07.100 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:19:07.101 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:19:07.114 [3] [WARN]: client is not initialized yet
2025-04-02 22:19:07.116 [5] [TRACE]: suggestion context
2025-04-02 22:19:07.116 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:19:07.117 [7] [TRACE]: suggestion context
2025-04-02 22:19:07.117 [8] [TRACE]: suggestion new context
{}
2025-04-02 22:21:17.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:21:17.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:21:17.098 [3] [TRACE]: suggestion context
2025-04-02 22:21:17.098 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:21:17.099 [5] [TRACE]: suggestion context
2025-04-02 22:21:17.099 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:21:17.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:21:17.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:21:17.100 [4] [TRACE]: suggestion new context
{}
2025-04-02 22:21:17.100 [3] [TRACE]: suggestion context
2025-04-02 22:21:17.102 [5] [TRACE]: suggestion context
2025-04-02 22:21:17.102 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:21:17.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-02 22:21:17.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-02 22:21:17.098 [3] [WARN]: client is not initialized yet
2025-04-02 22:21:17.100 [5] [TRACE]: suggestion context
2025-04-02 22:21:17.100 [6] [TRACE]: suggestion new context
{}
2025-04-02 22:21:17.101 [7] [TRACE]: suggestion context
2025-04-02 22:21:17.101 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:31:37.086 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:31:37.087 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:31:37.107 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:31:37.107 [3] [TRACE]: suggestion context
2025-04-03 08:31:37.108 [5] [TRACE]: suggestion context
2025-04-03 08:31:37.108 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:31:37.086 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:31:37.087 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:31:37.102 [3] [ERROR]: client is not initialized yet
2025-04-03 08:31:37.104 [5] [TRACE]: suggestion context
2025-04-03 08:31:37.104 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:31:37.105 [7] [TRACE]: suggestion context
2025-04-03 08:31:37.105 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:32:31.086 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:32:31.087 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:32:31.100 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:32:31.102 [5] [TRACE]: suggestion context
2025-04-03 08:32:31.100 [3] [TRACE]: suggestion context
2025-04-03 08:32:31.102 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:32:31.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:32:31.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:32:31.099 [3] [ERROR]: client is not initialized yet
2025-04-03 08:32:31.101 [5] [TRACE]: suggestion context
2025-04-03 08:32:31.101 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:32:31.102 [7] [TRACE]: suggestion context
2025-04-03 08:32:31.102 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:34:28.091 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:34:28.092 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:34:28.107 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:34:28.107 [3] [TRACE]: suggestion context
2025-04-03 08:34:28.109 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:34:28.109 [5] [TRACE]: suggestion context
2025-04-03 08:34:28.090 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:34:28.091 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:34:28.105 [3] [ERROR]: client is not initialized yet
2025-04-03 08:34:28.107 [5] [TRACE]: suggestion context
2025-04-03 08:34:28.107 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:34:28.109 [7] [TRACE]: suggestion context
2025-04-03 08:34:28.109 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:35:31.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:35:31.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:35:31.099 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:35:31.100 [5] [TRACE]: suggestion context
2025-04-03 08:35:31.099 [3] [TRACE]: suggestion context
2025-04-03 08:35:31.100 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:35:31.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:35:31.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:35:31.097 [3] [ERROR]: client is not initialized yet
2025-04-03 08:35:31.099 [5] [TRACE]: suggestion context
2025-04-03 08:35:31.099 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:35:31.100 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:35:31.100 [7] [TRACE]: suggestion context
2025-04-03 08:36:02.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:36:02.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:36:02.099 [3] [TRACE]: suggestion context
2025-04-03 08:36:02.099 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:36:02.100 [5] [TRACE]: suggestion context
2025-04-03 08:36:02.100 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:36:03.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:36:03.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:36:03.098 [3] [ERROR]: client is not initialized yet
2025-04-03 08:36:03.100 [5] [TRACE]: suggestion context
2025-04-03 08:36:03.100 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:36:03.102 [7] [TRACE]: suggestion context
2025-04-03 08:36:03.102 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:36:26.086 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:36:26.087 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:36:26.102 [3] [TRACE]: suggestion context
2025-04-03 08:36:26.102 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:36:26.104 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:36:26.104 [5] [TRACE]: suggestion context
2025-04-03 08:36:26.088 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:36:26.089 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:36:26.102 [3] [ERROR]: client is not initialized yet
2025-04-03 08:36:26.104 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:36:26.104 [5] [TRACE]: suggestion context
2025-04-03 08:36:26.106 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:36:26.106 [7] [TRACE]: suggestion context
2025-04-03 08:36:43.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:36:43.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:36:43.099 [3] [TRACE]: suggestion context
2025-04-03 08:36:43.099 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:36:43.100 [5] [TRACE]: suggestion context
2025-04-03 08:36:43.100 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:36:43.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:36:43.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:36:43.097 [3] [ERROR]: client is not initialized yet
2025-04-03 08:36:43.099 [5] [TRACE]: suggestion context
2025-04-03 08:36:43.099 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:36:43.101 [7] [TRACE]: suggestion context
2025-04-03 08:36:43.101 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:37:59.092 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:37:59.093 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:37:59.109 [3] [TRACE]: suggestion context
2025-04-03 08:37:59.109 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:37:59.110 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:37:59.110 [5] [TRACE]: suggestion context
2025-04-03 08:38:00.094 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:38:00.095 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:38:00.110 [3] [ERROR]: client is not initialized yet
2025-04-03 08:38:00.112 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:38:00.112 [5] [TRACE]: suggestion context
2025-04-03 08:38:00.114 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:38:00.114 [7] [TRACE]: suggestion context
2025-04-03 08:40:29.090 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:40:29.091 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:40:29.108 [3] [TRACE]: suggestion context
2025-04-03 08:40:29.108 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:40:29.109 [5] [TRACE]: suggestion context
2025-04-03 08:40:29.109 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:40:29.089 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:40:29.090 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:40:29.103 [3] [ERROR]: client is not initialized yet
2025-04-03 08:40:29.105 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:40:29.105 [5] [TRACE]: suggestion context
2025-04-03 08:40:29.107 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:40:29.107 [7] [TRACE]: suggestion context
2025-04-03 08:43:36.087 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:43:36.088 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:43:36.102 [3] [TRACE]: suggestion context
2025-04-03 08:43:36.102 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:43:36.104 [5] [TRACE]: suggestion context
2025-04-03 08:43:36.104 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:43:36.093 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:43:36.094 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:43:36.107 [3] [ERROR]: client is not initialized yet
2025-04-03 08:43:36.109 [5] [TRACE]: suggestion context
2025-04-03 08:43:36.109 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:43:36.111 [7] [TRACE]: suggestion context
2025-04-03 08:43:36.111 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:45:10.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:45:10.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:45:10.099 [3] [TRACE]: suggestion context
2025-04-03 08:45:10.099 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:45:10.101 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:45:10.101 [5] [TRACE]: suggestion context
2025-04-03 08:45:10.085 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:45:10.086 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:45:10.099 [3] [ERROR]: client is not initialized yet
2025-04-03 08:45:10.101 [5] [TRACE]: suggestion context
2025-04-03 08:45:10.101 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:45:10.102 [7] [TRACE]: suggestion context
2025-04-03 08:45:10.102 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:45:43.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:45:43.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:45:43.099 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:45:43.099 [3] [TRACE]: suggestion context
2025-04-03 08:45:43.100 [5] [TRACE]: suggestion context
2025-04-03 08:45:43.100 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:45:43.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:45:43.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:45:43.097 [3] [ERROR]: client is not initialized yet
2025-04-03 08:45:43.100 [5] [TRACE]: suggestion context
2025-04-03 08:45:43.100 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:45:43.101 [7] [TRACE]: suggestion context
2025-04-03 08:45:43.101 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:46:11.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:46:11.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:46:11.099 [3] [TRACE]: suggestion context
2025-04-03 08:46:11.099 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:46:11.101 [5] [TRACE]: suggestion context
2025-04-03 08:46:11.101 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:46:11.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:46:11.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:46:11.094 [3] [ERROR]: client is not initialized yet
2025-04-03 08:46:11.096 [5] [TRACE]: suggestion context
2025-04-03 08:46:11.096 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:46:11.098 [7] [TRACE]: suggestion context
2025-04-03 08:46:11.098 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:47:01.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:47:01.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:47:01.099 [3] [TRACE]: suggestion context
2025-04-03 08:47:01.099 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:47:01.100 [5] [TRACE]: suggestion context
2025-04-03 08:47:01.100 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:47:01.085 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:47:01.086 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:47:01.098 [3] [ERROR]: client is not initialized yet
2025-04-03 08:47:01.100 [5] [TRACE]: suggestion context
2025-04-03 08:47:01.100 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:47:01.102 [7] [TRACE]: suggestion context
2025-04-03 08:47:01.102 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:47:27.087 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:47:27.088 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:47:27.102 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:47:27.104 [5] [TRACE]: suggestion context
2025-04-03 08:47:27.102 [3] [TRACE]: suggestion context
2025-04-03 08:47:27.104 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:47:28.090 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:47:28.091 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:47:28.106 [3] [ERROR]: client is not initialized yet
2025-04-03 08:47:28.108 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:47:28.108 [5] [TRACE]: suggestion context
2025-04-03 08:47:28.109 [7] [TRACE]: suggestion context
2025-04-03 08:47:28.109 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:48:16.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:48:16.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:48:16.098 [3] [TRACE]: suggestion context
2025-04-03 08:48:16.098 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:48:16.100 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:48:16.100 [5] [TRACE]: suggestion context
2025-04-03 08:48:16.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:48:16.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:48:16.096 [3] [ERROR]: client is not initialized yet
2025-04-03 08:48:16.098 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:48:16.100 [7] [TRACE]: suggestion context
2025-04-03 08:48:16.098 [5] [TRACE]: suggestion context
2025-04-03 08:48:16.100 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:48:51.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:48:51.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:48:51.099 [3] [TRACE]: suggestion context
2025-04-03 08:48:51.099 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:48:51.100 [5] [TRACE]: suggestion context
2025-04-03 08:48:51.100 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:48:51.089 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:48:51.090 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:48:51.104 [3] [ERROR]: client is not initialized yet
2025-04-03 08:48:51.107 [5] [TRACE]: suggestion context
2025-04-03 08:48:51.107 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:48:51.109 [7] [TRACE]: suggestion context
2025-04-03 08:48:51.109 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:49:25.083 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:49:25.084 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:49:25.102 [3] [TRACE]: suggestion context
2025-04-03 08:49:25.102 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:49:25.103 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:49:25.103 [5] [TRACE]: suggestion context
2025-04-03 08:49:25.086 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:49:25.087 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:49:25.101 [3] [ERROR]: client is not initialized yet
2025-04-03 08:49:25.103 [5] [TRACE]: suggestion context
2025-04-03 08:49:25.103 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:49:25.105 [7] [TRACE]: suggestion context
2025-04-03 08:49:25.105 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:51:08.084 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:51:08.085 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:51:08.103 [3] [TRACE]: suggestion context
2025-04-03 08:51:08.103 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:51:08.105 [5] [TRACE]: suggestion context
2025-04-03 08:51:08.105 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:51:08.098 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:51:08.099 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:51:09.114 [3] [ERROR]: client is not initialized yet
2025-04-03 08:51:09.116 [5] [TRACE]: suggestion context
2025-04-03 08:51:09.116 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:51:09.117 [7] [TRACE]: suggestion context
2025-04-03 08:51:09.117 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:52:46.082 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:52:46.083 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:52:46.098 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:52:46.098 [3] [TRACE]: suggestion context
2025-04-03 08:52:46.099 [5] [TRACE]: suggestion context
2025-04-03 08:52:46.099 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:52:46.086 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:52:46.087 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:52:46.100 [3] [ERROR]: client is not initialized yet
2025-04-03 08:52:46.102 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:52:46.102 [5] [TRACE]: suggestion context
2025-04-03 08:52:46.104 [7] [TRACE]: suggestion context
2025-04-03 08:52:46.104 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:53:07.082 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:53:07.083 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:53:07.098 [3] [TRACE]: suggestion context
2025-04-03 08:53:07.098 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:53:07.099 [5] [TRACE]: suggestion context
2025-04-03 08:53:07.099 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:53:07.089 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:53:07.090 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:53:07.104 [3] [ERROR]: client is not initialized yet
2025-04-03 08:53:07.106 [5] [TRACE]: suggestion context
2025-04-03 08:53:07.106 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:53:07.107 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:53:07.107 [7] [TRACE]: suggestion context
2025-04-03 08:53:40.081 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:53:40.082 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:53:40.096 [3] [TRACE]: suggestion context
2025-04-03 08:53:40.096 [4] [TRACE]: suggestion new context
{}
2025-04-03 08:53:40.098 [5] [TRACE]: suggestion context
2025-04-03 08:53:40.098 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:53:40.088 [1] [DEBUG]: active plugin config:
{
  copilot_node_command = "node",
  filetypes = {},
  logger = {
    file = "tests/copilot.log",
    file_log_level = 0,
    log_lsp_messages = false,
    print_log_level = 3,
    trace_lsp = "off",
    trace_lsp_progress = false
  },
  merge_with_user_configs = <function 1>,
  panel = {
    auto_refresh = false,
    enabled = true,
    keymap = {
      accept = "<CR>",
      jump_next = "]]",
      jump_prev = "[[",
      open = "<M-CR>",
      refresh = "gr"
    },
    layout = {
      position = "bottom",
      ratio = 0.4
    }
  },
  root_dir = <function 2>,
  server = {
    type = "nodejs"
  },
  server_opts_overrides = {},
  should_attach = <function 3>,
  suggestion = {
    auto_trigger = false,
    debounce = 15,
    enabled = true,
    hide_during_completion = true,
    keymap = {
      accept = "<M-l>",
      accept_line = false,
      accept_word = false,
      dismiss = "<C-]>",
      next = "<M-]>",
      prev = "<M-[>"
    }
  },
  validate = <function 4>,
  workspace_folders = {}
}
2025-04-03 08:53:40.089 [2] [DEBUG]: active LSP config (may change runtime):
{
  capabilities = {
    general = {
      positionEncodings = { "utf-8", "utf-16", "utf-32" }
    },
    textDocument = {
      callHierarchy = {
        dynamicRegistration = false
      },
      codeAction = {
        codeActionLiteralSupport = {
          codeActionKind = {
            valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
          }
        },
        dataSupport = true,
        dynamicRegistration = true,
        isPreferredSupport = true,
        resolveSupport = {
          properties = { "edit", "command" }
        }
      },
      codeLens = {
        dynamicRegistration = false,
        resolveSupport = {
          properties = { "command" }
        }
      },
      completion = {
        completionItem = {
          commitCharactersSupport = false,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          preselectSupport = false,
          resolveSupport = {
            properties = { "additionalTextEdits", "command" }
          },
          snippetSupport = true,
          tagSupport = {
            valueSet = { 1 }
          }
        },
        completionItemKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
        },
        completionList = {
          itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
        },
        contextSupport = true,
        dynamicRegistration = false
      },
      declaration = {
        linkSupport = true
      },
      definition = {
        dynamicRegistration = true,
        linkSupport = true
      },
      diagnostic = {
        dynamicRegistration = false
      },
      documentHighlight = {
        dynamicRegistration = false
      },
      documentSymbol = {
        dynamicRegistration = false,
        hierarchicalDocumentSymbolSupport = true,
        symbolKind = {
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
        }
      },
      foldingRange = {
        dynamicRegistration = false,
        foldingRange = {
          collapsedText = true
        },
        lineFoldingOnly = true
      },
      formatting = {
        dynamicRegistration = true
      },
      hover = {
        contentFormat = { "markdown", "plaintext" },
        dynamicRegistration = true
      },
      implementation = {
        linkSupport = true
      },
      inlayHint = {
        dynamicRegistration = true,
        resolveSupport = {
          properties = { "textEdits", "tooltip", "location", "command" }
        }
      },
      publishDiagnostics = {
        dataSupport = true,
        relatedInformation = true,
        tagSupport = {
          valueSet = { 1, 2 }
        }
      },
      rangeFormatting = {
        dynamicRegistration = true,
        rangesSupport = true
      },
      references = {
        dynamicRegistration = false
      },
      rename = {
        dynamicRegistration = true,
        prepareSupport = true
      },
      semanticTokens = {
        augmentsSyntaxTokens = true,
        dynamicRegistration = false,
        formats = { "relative" },
        multilineTokenSupport = false,
        overlappingTokenSupport = true,
        requests = {
          full = {
            delta = true
          },
          range = false
        },
        serverCancelSupport = false,
        tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
        tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
      },
      signatureHelp = {
        dynamicRegistration = false,
        signatureInformation = {
          activeParameterSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          parameterInformation = {
            labelOffsetSupport = true
          }
        }
      },
      synchronization = {
        didSave = true,
        dynamicRegistration = false,
        willSave = true,
        willSaveWaitUntil = true
      },
      typeDefinition = {
        linkSupport = true
      }
    },
    window = {
      showDocument = {
        support = true
      },
      showMessage = {
        messageActionItem = {
          additionalPropertiesSupport = true
        }
      },
      workDoneProgress = true
    },
    workspace = {
      workspaceFolders = true
    }
  },
  cmd = { "node", "C:\\Users\\antoi\\AppData\\Local\\nvim-data\\lazy\\copilot.lua\\copilot\\js\\language-server.js", "--stdio" },
  get_language_id = <function 1>,
  handlers = {
    PanelSolution = <function 2>,
    PanelSolutionsDone = <function 3>,
    statusNotification = <function 4>
  },
  init_options = {
    editorInfo = {
      name = "Neovim",
      version = "0.11.0"
    },
    editorPluginInfo = {
      name = "copilot.lua",
      version = "1.294.0"
    }
  },
  name = "copilot",
  on_exit = <function 5>,
  on_init = <function 6>,
  root_dir = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
  settings = {
    telemetry = {
      telemetryLevel = "all"
    }
  },
  workspace_folders = { {
      name = "C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua",
      uri = "file:///C:/Users/antoi/AppData/Local/nvim-data/lazy/copilot.lua"
    } }
}
2025-04-03 08:53:40.103 [3] [ERROR]: client is not initialized yet
2025-04-03 08:53:40.106 [5] [TRACE]: suggestion context
2025-04-03 08:53:40.106 [6] [TRACE]: suggestion new context
{}
2025-04-03 08:53:40.107 [8] [TRACE]: suggestion new context
{}
2025-04-03 08:53:40.107 [7] [TRACE]: suggestion context
